/* 
   This is a test sketch for Holonomic-X drive BreadBoardBOt (BBbot) based on 
   Adafruit assembled Motor Shield for Arduino v2
   Dave Eslinger 
   For use with the Adafruit Motor Shield v2 
   ---->	http://www.adafruit.com/products/1438
*/

#include <Wire.h>
#include <Adafruit_MotorShield.h>
#include "utility/Adafruit_PWMServoDriver.h"


// Create the motor shield object with the default I2C address
Adafruit_MotorShield AFMS = Adafruit_MotorShield(); 

// Select which 'port' M1, M2, M3 or M4. In this case, M1
Adafruit_DCMotor *motor1 = AFMS.getMotor(1);
Adafruit_DCMotor *motor2 = AFMS.getMotor(2);
Adafruit_DCMotor *motor3 = AFMS.getMotor(3);
Adafruit_DCMotor *motor4 = AFMS.getMotor(4);

// declare R/C pins and variables
#define RC1 4 // Use precompiler statements to define pins; they are constants
#define RC2 8

int ch1; // Right Joysteck, Left - Right reading
int ch2; // Right Joysteck, Front - Back reading
//int ch3; // Left Joysteck, Front - Back reading
//int ch4; // Left Joystick, Left - Right reading
//int ch5; // VR(A)
//int ch6; // VR(B)

void setup() {
  Serial.begin(9600);           // set up Serial library at 9600 bps
  Serial.println("X-Holonomic R/C drive Test");

  // Define input pins for R/C 
  pinMode(RC1, INPUT);
  pinMode(RC2, INPUT);

  AFMS.begin();  // create with the default frequency 1.6KHz
  //AFMS.begin(1000);  // OR with a different frequency, say 1KHz
  
  // Turn off all motors
  motor1->run(RELEASE);
  motor2->run(RELEASE);
  motor3->run(RELEASE);
  motor4->run(RELEASE);
}

void loop() {
  uint8_t i;
  Serial.print("tick");

  motor1->setSpeed(200);  
  motor2->setSpeed(200);  
  motor3->setSpeed(200);  
  motor4->setSpeed(200);  

  motor1->run(FORWARD); // Drives forward
  motor2->run(FORWARD);
  motor3->run(FORWARD);
  motor4->run(FORWARD);
  delay(500);
  motor1->run(RELEASE);
  motor2->run(RELEASE);
  motor3->run(RELEASE);
  motor4->run(RELEASE);
  delay(500);

  motor1->run(BACKWARD); // strafes right
  motor2->run(FORWARD);
  motor3->run(BACKWARD);
  motor4->run(FORWARD);
  delay(500);
  motor1->run(RELEASE);
  motor2->run(RELEASE);
  motor3->run(RELEASE);
  motor4->run(RELEASE);
  delay(500);

  motor1->run(BACKWARD); // Straight Backward
  motor2->run(BACKWARD);
  motor3->run(BACKWARD);
  motor4->run(BACKWARD);
  delay(500);

  motor1->run(RELEASE); //Pause
  motor2->run(RELEASE);
  motor3->run(RELEASE);
  motor4->run(RELEASE);
  delay(500);

  motor1->run(FORWARD); // Strafe left
  motor2->run(BACKWARD);
  motor3->run(FORWARD);
  motor4->run(BACKWARD);
  delay(500);

  motor1->run(RELEASE); // long pause
  motor2->run(RELEASE);
  motor3->run(RELEASE);
  motor4->run(RELEASE);
  delay(2000);

  motor1->run(FORWARD); // Strafe left
  motor2->run(BACKWARD);
  motor3->run(BACKWARD);
  motor4->run(FORWARD);
  delay(5000);

}
